<?php

namespace Arquematics\WallBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Tools\Pagination\Paginator;

use Arquematics\UserBundle\Entity\UserFriend;

/**
 * Notification repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WallMessageRepository extends EntityRepository
{
    public function findByUserAll($authUser, $currentPage = 1)
    {
         $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.wallEncs me
                    LEFT JOIN me.user ue
                    WHERE (u = :authUser)
                    ")
            ->setParameter('authUser', $authUser)
            ;
         
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
        
    }
    public function findByUser($channel, $authUser, $user, $hash = false, $currentPage = 1)
    {
        if ((!$user) && (!$hash))
        {
          $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.wallEncs me
                    LEFT JOIN me.user ue
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.channels ch
                    LEFT JOIN m.tags t
                    LEFT JOIN m.comments c
                    WHERE (ue = :authUser) AND (ch = :channel) AND (
                                (u = :authUser) OR (u.id in 
                                    (
                                        SELECT uu.id
                                        FROM UserBundle:User uu
                                        LEFT JOIN uu.friends f
                                        LEFT JOIN uu.users uuu
                                        WHERE 
                                            (
                                                (f.status = :status) AND ((f.friend = :authUser) OR (f.user = :authUser))
                                            ) 
                                            OR 
                                            (
                                                (uuu.status = :status) AND ((uuu.user = :authUser) OR (uuu.friend = :authUser)) 
                                            )
                                    )
                                )
                            )
                    ORDER BY m.createdAt DESC, c.createdAt ASC
            ")
            ->setParameter('channel', $channel)
            ->setParameter('authUser', $authUser)
            ->setParameter('status', UserFriend::ACCEPT)
            ;
        }
        else if ((!$user) && $hash)
        {
            $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.wallEncs me
                    LEFT JOIN me.user ue
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.channels ch
                    LEFT JOIN m.tags t
                    LEFT JOIN m.comments c
                    WHERE (ue = :authUser) AND (t.hash = :hash) AND (ch = :channel) AND (
                                (u = :authUser) OR (u.id in 
                                    (
                                        SELECT uu.id
                                        FROM UserBundle:User uu
                                        LEFT JOIN uu.friends f
                                        LEFT JOIN uu.users uuu
                                        WHERE 
                                            (
                                                (f.status = :status) AND ((f.friend = :authUser) OR (f.user = :authUser))
                                            ) 
                                            OR 
                                            (
                                                (uuu.status = :status) AND ((uuu.user = :authUser) OR (uuu.friend = :authUser)) 
                                            )
                                    )
                                )
                            )
                    ORDER BY m.createdAt DESC, c.createdAt ASC
            ")
            ->setParameter('hash', $hash)
            ->setParameter('channel', $channel)
            ->setParameter('authUser', $authUser)
            ->setParameter('status', UserFriend::ACCEPT)
            ;
        }
        else if (($user) && (!$hash))
        {
            $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.wallEncs me
                    LEFT JOIN me.user ue
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.channels ch
                    LEFT JOIN m.tags t
                    LEFT JOIN m.comments c
                    WHERE (ue = :authUser) AND (u = :user) AND (ch = :channel) AND (
                                (u = :authUser) OR (u.id in 
                                    (
                                        SELECT uu.id
                                        FROM UserBundle:User uu
                                        LEFT JOIN uu.friends f
                                        LEFT JOIN uu.users uuu
                                        WHERE 
                                            (
                                                (f.status = :status) AND ((f.friend = :authUser) OR (f.user = :authUser))
                                            ) 
                                            OR 
                                            (
                                                (uuu.status = :status) AND ((uuu.user = :authUser) OR (uuu.friend = :authUser)) 
                                            )
                                    )
                                )
                            )
                    ORDER BY m.createdAt DESC, c.createdAt ASC
            ")
            ->setParameter('user', $user)   
            ->setParameter('channel', $channel)
            ->setParameter('authUser', $authUser)
            ->setParameter('status', UserFriend::ACCEPT)
            ;
        }
        else
        {
            $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.wallEncs me
                    LEFT JOIN me.user ue
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.channels ch
                    LEFT JOIN m.tags t
                    LEFT JOIN m.comments c
                    WHERE (ue = :authUser) AND (t.hash = :hash) AND (u = :user) AND (ch = :channel) AND (
                                (u = :authUser) OR (u.id in 
                                    (
                                        SELECT uu.id
                                        FROM UserBundle:User uu
                                        LEFT JOIN uu.friends f
                                        LEFT JOIN uu.users uuu
                                        WHERE 
                                            (
                                                (f.status = :status) AND ((f.friend = :authUser) OR (f.user = :authUser))
                                            ) 
                                            OR 
                                            (
                                                (uuu.status = :status) AND ((uuu.user = :authUser) OR (uuu.friend = :authUser)) 
                                            )
                                    )
                                )
                            )
                    ORDER BY m.createdAt DESC, c.createdAt ASC
            ")
            ->setParameter('hash', $hash)
            ->setParameter('user', $user)   
            ->setParameter('channel', $channel)
            ->setParameter('authUser', $authUser)
            ->setParameter('status', UserFriend::ACCEPT)
            ;
        }
        
      //echo $query->getSQL().'SQL';
      //exit();
         //
        //return $query->getResult();

        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
         
    }

    /**
    * //configuracion del servidor
    * 
    * SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
    * SET GLOBAL max_allowed_packet=524288000;
    * SET GLOBAL max_allowed_packet=1073741824; 
    * sudo mysqldump -u admin -p raf6 --single-transaction --max_allowed_packet=1G > raf6.sql 1GB
    *  Paginator Helper
    *
    * Pass through a query object, current page & limit
    * the offset is calculated from the page and limit
    * returns an `Paginator` instance, which you can call the following on:
    *
    *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
    *     $paginator->count() # Count of ALL posts (ie: `20` posts)
    *     $paginator->getIterator() # ArrayIterator
    *
    * @param Doctrine\ORM\Query $dql   DQL Query Object
    * @param integer            $page  Current page (defaults to 1)
    * @param integer            $limit The total number per page (defaults to 5)
    *
    * @return \Doctrine\ORM\Tools\Pagination\Paginator
    */
    public function paginate($dql, $page = 1, $limit = 20)
    {
        $paginator = new Paginator($dql);
        
    
        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
    
    public function findByTag($tag)
    {
         $query = $this->getEntityManager()->
                createQuery("
                    SELECT m 
                    FROM WallBundle:WallMessage m
                    LEFT JOIN m.tags t
                    WHERE (t = :tag)
                    ORDER BY m.createdAt DESC, m.createdAt ASC
            ")
            ->setParameter('tag', $tag)  
            ;
        
        return $query->getResult();
        
    }

}
