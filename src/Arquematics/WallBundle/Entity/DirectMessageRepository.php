<?php

namespace Arquematics\WallBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * Notification repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectMessageRepository extends EntityRepository
{
    
    public function findByUser( $authUser, $user, $currentPage = 1)
    {
        $query = $this->getEntityManager()->
                createQuery("
                    SELECT m
                    FROM WallBundle:DirectMessage m
                    LEFT JOIN m.createdBy u
                    LEFT JOIN m.sendTo uu
                    WHERE ((u = :authUser) AND (uu = :user)) OR ((u = :user) AND (uu = :authUser))
                    ORDER BY m.createdAt DESC
            ")
            ->setParameter('authUser', $authUser)
            ->setParameter('user', $user)
            ;
        
        
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
         
    }
    /**
    * //configuracion del servidor
    * 
    * SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
    * SET GLOBAL max_allowed_packet=524288000;
    * SET GLOBAL max_allowed_packet=1073741824; 
    * sudo mysqldump -u admin -p raf6 --single-transaction --max_allowed_packet=1G > raf6.sql 1GB
    *  Paginator Helper
    *
    * Pass through a query object, current page & limit
    * the offset is calculated from the page and limit
    * returns an `Paginator` instance, which you can call the following on:
    *
    *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
    *     $paginator->count() # Count of ALL posts (ie: `20` posts)
    *     $paginator->getIterator() # ArrayIterator
    *
    * @param Doctrine\ORM\Query $dql   DQL Query Object
    * @param integer            $page  Current page (defaults to 1)
    * @param integer            $limit The total number per page (defaults to 5)
    *
    * @return \Doctrine\ORM\Tools\Pagination\Paginator
    */
    public function paginate($dql, $page = 1, $limit = 20)
    {
        $paginator = new Paginator($dql);
        
    
        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
    
}
